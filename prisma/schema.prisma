// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Event Store - All state changes recorded as immutable events
model Event {
  id        String   @id @default(cuid())
  type      String   // Event type (e.g., "chain.created", "document.updated")
  payload   Json     // Event-specific data with JSON indexing
  timestamp DateTime @default(now())
  userId    String?  // User who triggered the event (nullable for system events)
  streamId  String   // Aggregate/stream identifier
  version   Int      // Sequential version within stream

  // Relationships
  chainSnapshots    ChainSnapshot[]
  documentSnapshots DocumentSnapshot[]
  agentSnapshots    AgentSnapshot[]
  user              User? @relation(fields: [userId], references: [id])

  // Indexes for performance
  @@index([streamId, version])
  @@index([timestamp])
  @@index([type])
  @@index([userId])
}

// Performance optimization - Materialized views for fast chain state access
model ChainSnapshot {
  id                String   @id @default(cuid())
  name              String   // Chain name
  canvasState       Json     // Current canvas state (nodes, edges, viewport)
  metadata          Json?    // Additional chain metadata
  lastEventId       String   // Last event that updated this snapshot
  lastEventVersion  Int      // Last event version
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  lastEvent Event @relation(fields: [lastEventId], references: [id])

  // Indexes
  @@index([name])
}

// Performance optimization - Materialized views for fast document access
model DocumentSnapshot {
  id                String   @id @default(cuid())
  title             String   // Document title
  content           String   // Current document content
  version           Int      // Current version number
  metadata          Json?    // Document metadata
  lastEventId       String   // Last event that updated this snapshot
  lastEventVersion  Int      // Last event version
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  lastEvent         Event @relation(fields: [lastEventId], references: [id])
  documentVersions  DocumentVersion[]

  // Indexes
  @@index([title])
}

// Performance optimization - Materialized views for fast agent access
model AgentSnapshot {
  id                String   @id @default(cuid())
  name              String   // Agent name
  prompt            String   // Agent prompt/instructions
  model             String   // LLM model identifier
  tools             Json?    // Available tools configuration
  metadata          Json?    // Agent metadata
  lastEventId       String   // Last event that updated this snapshot
  lastEventVersion  Int      // Last event version
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  lastEvent Event @relation(fields: [lastEventId], references: [id])

  // Indexes
  @@index([name])
}

// Complete version history for documents
model DocumentVersion {
  id                String    @id @default(cuid())
  documentId        String    // Document ID
  content           String    // Document content at this version
  description       String    // Description of changes
  versionNumber     Int       // Version number
  parentVersionId   String?   // Parent version ID for branching
  isAutoSaved       Boolean   @default(false) // Whether this was auto-saved
  userId            String?   // User who created this version
  createdAt         DateTime  @default(now())
  deletedAt         DateTime? // Soft delete timestamp

  // Relationships
  document DocumentSnapshot @relation(fields: [documentId], references: [id])
  user     User?            @relation(fields: [userId], references: [id])

  // Constraints
  @@unique([documentId, versionNumber])
  @@index([documentId])
  @@index([userId])
  @@index([parentVersionId])
  @@index([deletedAt])
}

// Visual connections between nodes in canvas
model Edge {
  id        String   @id @default(cuid())
  sourceId  String   // Source node ID
  targetId  String   // Target node ID
  type      String   // Edge type (e.g., "document_to_agent")
  metadata  Json?    // Edge metadata (position, style, etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes
  @@index([sourceId])
  @@index([targetId])
  @@index([type])
}

// User accounts for authentication
model User {
  id           String   @id @default(cuid())
  email        String   @unique // User email
  name         String   // User display name
  passwordHash String   // Hashed password
  role         String   @default("user") // User role
  metadata     Json?    // User metadata
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  events           Event[]
  sessions         Session[]
  documentVersions DocumentVersion[]
  agentExecutions AgentExecution[]
  executionStats   ExecutionStats[]

  // Indexes
  @@index([email])
  @@index([role])
}

// User sessions for JWT token management
model Session {
  id        String   @id @default(cuid())
  userId    String   // User ID
  token     String   @unique // JWT token
  expiresAt DateTime // Token expiration
  metadata  Json?    // Session metadata
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id])

  // Indexes
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// Agent execution results and metadata
model AgentExecution {
  id          String   @id @default(cuid())
  agentId     String   // Agent identifier
  input       String   // Input text provided to agent
  output      String   // Agent response output
  status      String   @default("completed") // Execution status: pending, running, completed, failed, cancelled
  duration    Int      // Execution duration in milliseconds
  tokens      Int      // Number of tokens used
  modelUsed   String?  // LLM model used for execution
  metadata    Json?    // Additional execution metadata
  userId      String?  // User who initiated the execution
  sessionId   String?  // Session identifier
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime? // When execution completed

  // Relationships
  user           User?              @relation(fields: [userId], references: [id])
  executionLogs  ExecutionLog[]
  executionChunks ExecutionChunk[]

  // Indexes for performance
  @@index([agentId])
  @@index([status])
  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
  @@index([completedAt])
  @@index([modelUsed])
}

// Execution logs for debugging and monitoring
model ExecutionLog {
  id              String   @id @default(cuid())
  executionId     String   // Reference to agent execution
  level           String   // Log level: debug, info, warn, error
  message         String   // Log message
  timestamp       DateTime @default(now())
  metadata        Json?    // Additional log metadata

  // Relationships
  execution AgentExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([executionId])
  @@index([level])
  @@index([timestamp])
}

// Streaming chunks for real-time execution tracking
model ExecutionChunk {
  id          String   @id @default(cuid())
  executionId String   // Reference to agent execution
  type        String   // Chunk type: content, error, done
  content     String?  // Chunk content (for content type)
  error       String?  // Error message (for error type)
  tokensUsed  Int?     // Tokens used in this chunk
  modelUsed   String?  // Model used for this chunk
  sequence    Int      // Chunk sequence number
  timestamp   DateTime @default(now())

  // Relationships
  execution AgentExecution @relation(fields: [executionId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([executionId])
  @@index([type])
  @@index([sequence])
  @@index([timestamp])
}

// Execution statistics for analytics and monitoring
model ExecutionStats {
  id              String   @id @default(cuid())
  agentId         String   // Agent identifier
  userId          String?  // User identifier
  date            DateTime // Date for aggregation
  totalExecutions Int      @default(0) // Total executions
  successfulExecutions Int @default(0) // Successful executions
  failedExecutions Int     @default(0) // Failed executions
  totalTokens     Int      @default(0) // Total tokens used
  totalDuration   Int      @default(0) // Total duration in milliseconds
  avgTokens       Float    @default(0) // Average tokens per execution
  avgDuration     Float    @default(0) // Average duration per execution
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  user User? @relation(fields: [userId], references: [id])

  // Indexes
  @@index([agentId])
  @@index([userId])
  @@index([date])
  @@unique([agentId, userId, date])
} 